{"version":3,"sources":["components/api.tsx","components/Search.tsx","components/Message.tsx","components/Form.tsx","components/Contact.tsx","components/Numbers.tsx","App.tsx","index.tsx"],"names":["getContacts","_ref","Object","asyncToGenerator","_regeneratorRuntime","mark","_callee","response","contactsList","wrap","_context","prev","next","process","NODE_ENkV","axios","get","sent","abrupt","data","stop","apply","this","arguments","makeContact","_ref2","_callee2","contact","_context2","post","_x","deleteContact","_ref3","_callee3","id","_context3","delete","_x2","updateContact","_ref4","_callee4","_context4","put","_x3","_x4","Search","filter","setFilter","react_default","a","createElement","value","onChange","e","target","baseStyle","background","fontSize","borderStyle","borderRadius","padding","marginBottom","styles","added","objectSpread","color","deleted","updated","err","ALertMessage","msg","kind","style","Form","persons","setPersons","_useState","useState","_useState2","slicedToArray","newContact","setNewContact","_useState3","_useState4","errMessage","setErrMessage","Message","onSubmit","preventDefault","existingContact","find","person","name","window","confirm","concat","updatedRecord","number","map","then","toConsumableArray","catch","error","setTimeout","type","Contact","onClick","Numbers","match","components_Contact","key","displayNotification","setNotification","App","NaN","_useState5","_useState6","notification","handleSetPersons","useEffect","contacts","components_Search","components_Form","components_Numbers","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.f9f0517b.chunk.js","sourcesContent":["import axios from 'axios'\nimport { ContactType } from '../types'\nconst endpoint = process.env.NODE_ENV === \"development\" ? \"http://localhost:3001\" : \"\"\n\nexport const getContacts = async () => {\n  process.env.NODE_ENkV \n  const response = axios.get(endpoint + '/api/people')\n  const contactsList = await response \n  return contactsList.data as unknown as ContactType[]\n}\n\nexport const makeContact = async (contact: ContactType) => {\n  const response = await axios.post(endpoint + '/api/people',contact)\n  return response.data \n}\n\nexport const deleteContact = async (id: number) => {\n  const response = await axios.delete(endpoint + '/api/people/'+id)\n  return response.data\n}\n\nexport const updateContact = async (id: number, data: ContactType) => {\n  const response = await axios.put(endpoint + '/api/people/'+id, data) \n  return response.data\n}\n","import React, { useState } from 'react'\n\nconst Search = ({ filter, setFilter }: SearchProps) => {\n    return (\n        <div>\n            filter shown with\n            <input value={filter} onChange={(e) => setFilter(e.target.value)} />\n            <br />\n        </div>\n    )\n}\n\ninterface SearchProps {\n    filter: string\n    setFilter: React.Dispatch<React.SetStateAction<string>>\n}\n\nexport default Search\n","import React from \"react\";\n\nconst ALertMessage = ({ msg, kind }: NotificationProps) => {\n  if (!msg) return null;\n  return <div style={{ ...styles[kind || \"\"] }}>{msg}</div>;\n};\ninterface NotificationProps {\n  msg: string;\n  kind?: string;\n}\nconst baseStyle = {\n  background: \"lightgrey\",\n  fontSize: \"20px\",\n  borderStyle: \"solid\",\n  borderRadius: \"5px\",\n  padding: \"10px\",\n  marginBottom: \"10px\",\n};\n\nconst styles: { [kind: string]: React.CSSProperties } = {\n  added: {\n    color: \"green\",\n    ...baseStyle,\n  },\n  deleted: {\n    color: \"red\",\n    ...baseStyle,\n  },\n  updated: {\n    color: \"black\",\n    ...baseStyle,\n  },\n  err: {\n    color: \"red\",\n    ...baseStyle,\n  },\n};\n\nexport default ALertMessage;\n","import React, { useState } from \"react\";\nimport { ContactType } from \"../types\";\nimport { makeContact, updateContact } from \"./api\";\nimport AlertMessage from \"./Message\";\n\nconst Form = ({ persons, setPersons }: FormProps) => {\n  const [newContact, setNewContact] = useState<ContactType>({} as ContactType);\n  const [errMessage, setErrMessage] = useState(\"\")\n  const handleSubmit = (e: React.SyntheticEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    const existingContact = persons.find(\n      (person) => person.name === newContact.name\n    );\n    if (existingContact) {\n      const confirm = window.confirm(\n        `${newContact.name} is already added to the phonebook, replace the old number with a new one?`\n      );\n      if (confirm) {\n        const updatedRecord = { ...existingContact, number: newContact.number };\n        updateContact(updatedRecord.id, updatedRecord);\n        setPersons(\n          persons.map((person) =>\n            person.name !== updatedRecord.name ? person : updatedRecord\n          ),\n          updatedRecord,\n          \"updated\"\n        );\n      }\n      return;\n    }\n    const response = makeContact(newContact)\n      .then((data) => setPersons([...persons, data], data, \"added\"))\n      .catch((err) => {\n        setErrMessage(err.response.data.error);\n        setTimeout(() => setErrMessage(\"\"), 5000)\n      })\n  };\n\n  if(errMessage) return <AlertMessage msg={errMessage} kind={\"err\"}/>\n    \n  return (\n    <div>\n      <h1>add a new</h1>\n      <form onSubmit={handleSubmit}>\n        <div>\n          name:{\" \"}\n          <input\n            onChange={(e) =>\n              setNewContact({\n                ...newContact,\n                name: e.target.value,\n              })\n            }\n            value={newContact.name || \"\"}\n          />\n          <br />\n          number:{\" \"}\n          <input\n            onChange={(e) =>\n              setNewContact({\n                ...newContact,\n                number: e.target.value,\n              })\n            }\n            value={newContact.number || \"\"}\n          />\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n    </div>\n  );\n};\n\ninterface FormProps {\n  persons: ContactType[];\n  setPersons: (\n    persons: ContactType[],\n    person: ContactType,\n    kind: string\n  ) => void;\n}\nexport default Form;\n","import React from \"react\";\nimport { ContactType } from \"../types\";\nimport { deleteContact, getContacts } from \"./api\";\n\nconst Contact = ({ person, persons, setPersons }: ContactProps) => {\n  const handleDelete = () => {\n    const confirm = window.confirm(`Delete ${person.name}?`);\n    try {\n      if (confirm) deleteContact(person.id);\n    } catch(err) {\n    setPersons(persons.filter((contact) => contact.id !== person.id),person,\"notfound\");\n    }\n    setPersons(persons.filter((contact) => contact.id !== person.id),person,\"deleted\");\n  };\n\n  return (\n    <div>\n      {person.name} {person.number}{\" \"}\n      <button onClick={handleDelete}>delete</button>\n    </div>\n  );\n};\n\ninterface ContactProps {\n  person: ContactType;\n  persons: ContactType[];\n  setPersons: (persons: ContactType[], person: ContactType, kind: string) => void;\n}\n\nexport default Contact;\n","import React from 'react'\nimport { ContactType } from '../types'\nimport Contact from './Contact'\n\nconst Numbers = ({ persons, setPersons, filter}: NumbersProps) => {\n    return (\n        <div>\n            <h1>Numbers</h1>\n            {persons\n                .filter(\n                    (person) =>\n                        person.name.match(filter) || person.number.match(filter)\n                )\n                .map((person) => (\n                    <Contact person={person} persons={persons} setPersons={setPersons} key={person.id} />\n                ))}\n        </div>\n    )\n}\n\ninterface NumbersProps {\n    persons: ContactType[]\n    setPersons: (persons: ContactType[], person: ContactType, kind: string) => void\n    filter: string\n}\n\nexport default Numbers\n","import React, { useEffect, useState } from \"react\";\nimport { ContactType } from \"./types\";\nimport { getContacts } from \"./components/api\";\n\nimport Filter from \"./components/Search\";\nimport PersonForm from \"./components/Form\";\nimport Contacts from \"./components/Numbers\";\nimport Notificaiton from \"./components/Message\";\n\nconst App = () => {\n  const [persons, setPersons] = useState<ContactType[]>([\n    { name: \"\", number: \"\", id: NaN },\n  ]);\n  const [filter, setFilter] = useState(\"\");\n  const [notification, setNotification] = useState({ msg: \"\", kind: \"\" });\n\n  const handleSetPersons = (\n    persons: ContactType[],\n    person: ContactType,\n    kind: string\n  ) => {\n    setPersons(persons);\n    person && kind && displayNotification(person, kind, setNotification)\n  }\n  \n  useEffect(() => {\n    const currentContacts = getContacts().then((contacts) =>\n      setPersons(contacts)\n    );\n  }, []);\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notificaiton msg={notification.msg} kind={notification.kind} />\n      <Filter filter={filter} setFilter={setFilter} />\n      <PersonForm persons={persons} setPersons={handleSetPersons} />\n      <Contacts\n        persons={persons}\n        setPersons={handleSetPersons}\n        filter={filter}\n      />\n    </div>\n  );\n};\n\nconst displayNotification = (person: ContactType, kind: string, setNotification: React.Dispatch<React.SetStateAction<{msg: string, kind: string}>>) => {\n\n    if (person && kind) {\n      if (kind === \"notfound\") {\n        setNotification({\n          msg: `${person.name} has already been removed from server`,\n          kind,\n        });\n      } else {\n        setNotification({ msg: `${person.name} was ${kind}`, kind });\n      }\n    }\n    setTimeout(() => setNotification({ msg: \"\", kind: \"\" }), 5000);\n  };\n\n\n\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\n\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement)\nroot.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>\n)\n"],"sourceRoot":""}